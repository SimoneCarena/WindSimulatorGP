import gpytorch

from utils.gp_utils import *
from GPModels.ExactGPModels import *
from GPModels.MultiOutputExactGPModels import *

def test_ExactGP(gp_data,x_labels,y_labels,T,save_plots):
    # RBF
    test_data = torch.DoubleTensor(gp_data)
    test_x_labels = torch.DoubleTensor(x_labels)
    test_y_labels = torch.DoubleTensor(y_labels)
    likelihood_x = gpytorch.likelihoods.GaussianLikelihood()
    likelihood_y = gpytorch.likelihoods.GaussianLikelihood()
    model_x = ExactGPModelRBF(test_data,test_x_labels,likelihood_x)
    model_y = ExactGPModelRBF(test_data,test_y_labels,likelihood_y)
    model_x_dict = torch.load(f'models/ExactGP/model-x-RBF.pth')
    model_y_dict = torch.load(f'models/ExactGP/model-y-RBF.pth')
    likelihood_x_dict = torch.load(f'models/ExactGP/likelihood-x-RBF.pth')
    likelihood_y_dict = torch.load(f'models/ExactGP/likelihood-y-RBF.pth')
    model_x.load_state_dict(model_x_dict)
    model_y.load_state_dict(model_y_dict)
    likelihood_x.load_state_dict(likelihood_x_dict)
    likelihood_y.load_state_dict(likelihood_y_dict)
    test_ExactGP__(test_data,[test_x_labels,test_y_labels],[model_x,model_y],[likelihood_x,likelihood_y],'RBF',T,save=save_plots)

    # RBF + Periodic
    test_data = torch.DoubleTensor(gp_data)
    test_x_labels = torch.DoubleTensor(x_labels)
    test_y_labels = torch.DoubleTensor(y_labels)
    likelihood_x = gpytorch.likelihoods.GaussianLikelihood()
    likelihood_y = gpytorch.likelihoods.GaussianLikelihood()
    model_x = ExactGPModelRBFPeriodic(test_data,test_x_labels,likelihood_x)
    model_y = ExactGPModelRBFPeriodic(test_data,test_y_labels,likelihood_y)
    model_x_dict = torch.load(f'models/ExactGP/model-x-RBF-Periodic.pth')
    model_y_dict = torch.load(f'models/ExactGP/model-y-RBF-Periodic.pth')
    likelihood_x_dict = torch.load(f'models/ExactGP/likelihood-x-RBF-Periodic.pth')
    likelihood_y_dict = torch.load(f'models/ExactGP/likelihood-y-RBF-Periodic.pth')
    model_x.load_state_dict(model_x_dict)
    model_y.load_state_dict(model_y_dict)
    likelihood_x.load_state_dict(likelihood_x_dict)
    likelihood_y.load_state_dict(likelihood_y_dict)
    test_ExactGP__(test_data,[test_x_labels,test_y_labels],[model_x,model_y],[likelihood_x,likelihood_y],'RBF-Periodic',T,save=save_plots)

    # Matern 3/2
    test_data = torch.DoubleTensor(gp_data)
    test_x_labels = torch.DoubleTensor(x_labels)
    test_y_labels = torch.DoubleTensor(y_labels)
    likelihood_x = gpytorch.likelihoods.GaussianLikelihood()
    likelihood_y = gpytorch.likelihoods.GaussianLikelihood()
    model_x = ExactGPModelMatern_32(test_data,test_x_labels,likelihood_x)
    model_y = ExactGPModelMatern_32(test_data,test_y_labels,likelihood_y)
    model_x_dict = torch.load(f'models/ExactGP/model-x-Matern-32.pth')
    model_y_dict = torch.load(f'models/ExactGP/model-y-Matern-32.pth')
    likelihood_x_dict = torch.load(f'models/ExactGP/likelihood-x-Matern-32.pth')
    likelihood_y_dict = torch.load(f'models/ExactGP/likelihood-y-Matern-32.pth')
    model_x.load_state_dict(model_x_dict)
    model_y.load_state_dict(model_y_dict)
    likelihood_x.load_state_dict(likelihood_x_dict)
    likelihood_y.load_state_dict(likelihood_y_dict)
    test_ExactGP__(test_data,[test_x_labels,test_y_labels],[model_x,model_y],[likelihood_x,likelihood_y],'Matern-32',T,save=save_plots)

    # Matern 5/2
    test_data = torch.DoubleTensor(gp_data)
    test_x_labels = torch.DoubleTensor(x_labels)
    test_y_labels = torch.DoubleTensor(y_labels)
    likelihood_x = gpytorch.likelihoods.GaussianLikelihood()
    likelihood_y = gpytorch.likelihoods.GaussianLikelihood()
    model_x = ExactGPModelMatern_52(test_data,test_x_labels,likelihood_x)
    model_y = ExactGPModelMatern_52(test_data,test_y_labels,likelihood_y)
    model_x_dict = torch.load(f'models/ExactGP/model-x-Matern-52.pth')
    model_y_dict = torch.load(f'models/ExactGP/model-y-Matern-52.pth')
    likelihood_x_dict = torch.load(f'models/ExactGP/likelihood-x-Matern-52.pth')
    likelihood_y_dict = torch.load(f'models/ExactGP/likelihood-y-Matern-52.pth')
    model_x.load_state_dict(model_x_dict)
    model_y.load_state_dict(model_y_dict)
    likelihood_x.load_state_dict(likelihood_x_dict)
    likelihood_y.load_state_dict(likelihood_y_dict)
    test_ExactGP__(test_data,[test_x_labels,test_y_labels],[model_x,model_y],[likelihood_x,likelihood_y],'Matern-52',T,save=save_plots)

    # Spectral Mixture (n=4)
    test_data = torch.DoubleTensor(gp_data)
    test_x_labels = torch.DoubleTensor(x_labels)
    test_y_labels = torch.DoubleTensor(y_labels)
    likelihood_x = gpytorch.likelihoods.GaussianLikelihood()
    likelihood_y = gpytorch.likelihoods.GaussianLikelihood()
    model_x = ExactGPModelSpectralMixture_3(test_data,test_x_labels,likelihood_x)
    model_y = ExactGPModelSpectralMixture_3(test_data,test_y_labels,likelihood_y)
    model_x_dict = torch.load(f'models/ExactGP/model-x-SpectralMixture-3.pth')
    model_y_dict = torch.load(f'models/ExactGP/model-y-SpectralMixture-3.pth')
    likelihood_x_dict = torch.load(f'models/ExactGP/likelihood-x-SpectralMixture-3.pth')
    likelihood_y_dict = torch.load(f'models/ExactGP/likelihood-y-SpectralMixture-3.pth')
    model_x.load_state_dict(model_x_dict)
    model_y.load_state_dict(model_y_dict)
    likelihood_x.load_state_dict(likelihood_x_dict)
    likelihood_y.load_state_dict(likelihood_y_dict)
    test_ExactGP__(test_data,[test_x_labels,test_y_labels],[model_x,model_y],[likelihood_x,likelihood_y],'SpectralMixture-3',T,save=save_plots)

def test_MultiOutputExactGP(gp_data,x_labels,y_labels,T,save_plots):
    # RBF
    test_data = torch.DoubleTensor(gp_data)
    test_x_labels = torch.DoubleTensor(x_labels)
    test_y_labels = torch.DoubleTensor(y_labels)
    test_labels = torch.stack([test_x_labels,test_y_labels],dim=1)
    likelihood = gpytorch.likelihoods.MultitaskGaussianLikelihood(num_tasks=2)
    model = MultiOutputExactGPModelRBF(test_data,test_labels,likelihood)
    model_dict = torch.load(f'models/MultiOutputExactGP/model-RBF.pth')
    likelihood_dict = torch.load(f'models/MultiOutputExactGP/likelihood-RBF.pth')
    model.load_state_dict(model_dict)
    likelihood.load_state_dict(likelihood_dict)
    test_ExactMultiOutputExactGP__(test_data,[test_x_labels,test_y_labels],model,likelihood,'RBF',T,save=save_plots)

    # RBF+Periodic
    test_data = torch.DoubleTensor(gp_data)
    test_x_labels = torch.DoubleTensor(x_labels)
    test_y_labels = torch.DoubleTensor(y_labels)
    test_labels = torch.stack([test_x_labels,test_y_labels],dim=1)
    likelihood = gpytorch.likelihoods.MultitaskGaussianLikelihood(num_tasks=2)
    model = MultiOutputExactGPModelRBFPeriodic(test_data,test_labels,likelihood)
    model_dict = torch.load(f'models/MultiOutputExactGP/model-RBF-Periodic.pth')
    likelihood_dict = torch.load(f'models/MultiOutputExactGP/likelihood-RBF-Periodic.pth')
    model.load_state_dict(model_dict)
    likelihood.load_state_dict(likelihood_dict)
    test_ExactMultiOutputExactGP__(test_data,[test_x_labels,test_y_labels],model,likelihood,'RBF-Periodic',T,save=save_plots)

    # Matern 3/2
    test_data = torch.DoubleTensor(gp_data)
    test_x_labels = torch.DoubleTensor(x_labels)
    test_y_labels = torch.DoubleTensor(y_labels)
    test_labels = torch.stack([test_x_labels,test_y_labels],dim=1)
    likelihood = gpytorch.likelihoods.MultitaskGaussianLikelihood(num_tasks=2)
    model = MultiOutputExactGPModelMatern_32(test_data,test_labels,likelihood)
    model_dict = torch.load(f'models/MultiOutputExactGP/model-Matern-32.pth')
    likelihood_dict = torch.load(f'models/MultiOutputExactGP/likelihood-Matern-32.pth')
    model.load_state_dict(model_dict)
    likelihood.load_state_dict(likelihood_dict)
    test_ExactMultiOutputExactGP__(test_data,[test_x_labels,test_y_labels],model,likelihood,'Matern-32',T,save=save_plots)

    # Matern 5/2
    test_data = torch.DoubleTensor(gp_data)
    test_x_labels = torch.DoubleTensor(x_labels)
    test_y_labels = torch.DoubleTensor(y_labels)
    test_labels = torch.stack([test_x_labels,test_y_labels],dim=1)
    likelihood = gpytorch.likelihoods.MultitaskGaussianLikelihood(num_tasks=2)
    model = MultiOutputExactGPModelMatern_52(test_data,test_labels,likelihood)
    model_dict = torch.load(f'models/MultiOutputExactGP/model-Matern-52.pth')
    likelihood_dict = torch.load(f'models/MultiOutputExactGP/likelihood-Matern-52.pth')
    model.load_state_dict(model_dict)
    likelihood.load_state_dict(likelihood_dict)
    test_ExactMultiOutputExactGP__(test_data,[test_x_labels,test_y_labels],model,likelihood,'Matern-52',T,save=save_plots)

    # Spectral Mixture 3
    test_data = torch.DoubleTensor(gp_data)
    test_x_labels = torch.DoubleTensor(x_labels)
    test_y_labels = torch.DoubleTensor(y_labels)
    test_labels = torch.stack([test_x_labels,test_y_labels],dim=1)
    likelihood = gpytorch.likelihoods.MultitaskGaussianLikelihood(num_tasks=2)
    model = MultiOutputExactGPModelSpectralMixture_3(test_data,test_labels,likelihood)
    model_dict = torch.load(f'models/MultiOutputExactGP/model-SpectralMixture-3.pth')
    likelihood_dict = torch.load(f'models/MultiOutputExactGP/likelihood-SpectralMixture-3.pth')
    model.load_state_dict(model_dict)
    likelihood.load_state_dict(likelihood_dict)
    test_ExactMultiOutputExactGP__(test_data,[test_x_labels,test_y_labels],model,likelihood,'SpectralMixture-3',T,save=save_plots)


